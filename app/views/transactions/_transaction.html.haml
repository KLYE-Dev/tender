.row
  - indent = !!@last_transaction_id && @last_transaction_id == transaction.trx_id
  - @last_transaction_id = transaction.trx_id
  .col-sm-12{class: indent ? 'pl-4 pt-0' : 'pt-1'}
    .op.op-mini.shadow-sm.bg-white.rounded{id: transaction.trx_id}
      %span.action
        - payload = transaction.hydrated_payload
        - payload.delete('isSignedWithActiveKey')
        - logs = transaction.hydrated_logs
        = link_to transaction.sender, account_home_path(transaction.sender)
        - if transaction.contract == 'null' && transaction.action == 'null'
          deployed new sidechain
          %code= payload['chainId']
          at Steem Reference Block:
          %code= payload['genesisSteemBlock']
        - elsif transaction.contract == 'contract' && transaction.action == 'deploy'
          deployed the
          %code= payload['name']
          contract
        - elsif transaction.contract == 'tokens' && ( transaction.action == 'transfer' || transaction.action == 'issue' )
          = case transaction.action
          - when 'transfer' then 'transferred'
          - when 'issue' then 'issued'
          - else; transaction.action
          &nbsp;
          %code= number_with_delimiter(payload['quantity']) + ' ' + payload['symbol'] rescue ''
          to
          = link_to payload['to'], account_home_path(payload['to'])
          %code= payload['memo']
        - elsif transaction.contract == 'tokens' && transaction.action == 'create'
          created a token called
          = link_to payload['name'].present? ? payload['name'] : payload['symbol'], transactions_path(symbol: payload['symbol'])
          = surround '(', ')' do
            symbol:
            = link_to payload['symbol'], transactions_path(symbol: payload['symbol'])          
        - elsif transaction.contract == 'tokens' && transaction.action == 'updateMetadata'
          created updated metadata for
          = link_to payload['name'].present? ? payload['name'] : payload['symbol'], transactions_path(symbol: payload['symbol'])
        - elsif transaction.contract == 'tokens' && transaction.action == 'enableStaking'
          enabled staking for
          = link_to payload['name'].present? ? payload['name'] : payload['symbol'], transactions_path(symbol: payload['symbol'])
          with unstaking cooldown of
          = pluralize payload['numberTransactions'], 'transaction'
          in
          = pluralize payload['unstakingCooldown'], 'day'
        - elsif transaction.contract == 'tokens' && transaction.action == 'updateUrl'
          updated URL for
          = link_to payload['name'].present? ? payload['name'] : payload['symbol'], transactions_path(symbol: payload['symbol'])
          to
          %code= payload['url']
        - elsif transaction.contract == 'tokens' && transaction.action == 'updateParams'
          updated params to
          %code= payload.to_json
        - elsif transaction.contract == 'nft' && transaction.action == 'issue'
          issued
          %code= payload['symbol']
          - if !!payload['to']
            to
            = link_to payload['to'], account_home_path(payload['to'])
          - if !!logs['events']
            .d-flex.align-content-around.flex-wrap
              = render partial: 'nft_event', collection: logs['events']
        - elsif transaction.contract == 'nft' && transaction.action == 'issueMultiple'
          issued multiple
          %code= payload['instances'].map{|p| p['symbol']}.uniq.join(', ')
          to
          = payload['instances'].map{|p| link_to p['to'], account_home_path(p['to'])}.uniq.join(', ').html_safe
          - logs['events'].each do |event|
            .badge-pill.badge-light.p-1.inset-shadow
              .bd-highlight.d-flex.align-content-around.flex-wrap
                - d = event['data']
                .bd-highlight= "from #{d['fromType'] || 'user'}: #{d['from']}&nbsp;".html_safe
                \|&nbsp;
                .bd-highlight= "to #{d['toType'] || 'user'}: #{d['to']}&nbsp;".html_safe
                \|&nbsp;
                .bd-highlight= "symbol: #{d['symbol']}&nbsp;".html_safe
                - if !!d['quantity']
                  \|&nbsp;
                  .bd-highlight= "quantity: #{d['quantity']}&nbsp;".html_safe
                - if !!d['lockedTokens'] && d['lockedTokens'].any?
                  \|&nbsp;
                  .bd-highlight= "lockedTokens: #{d['lockedTokens']}&nbsp;".html_safe
                - if !!d['lockedNfts'] && d['lockedNfts'].any?
                  \|&nbsp;
                  .bd-highlight= "lockedNfts: #{d['lockedNfts']}&nbsp;".html_safe
                - if !!d['properties'] && d['lockedNfts'].any?
                  \|&nbsp;
                  .bd-highlight= "properties: #{d['properties']}&nbsp;".html_safe
                - if !!d['id']
                  \|&nbsp;
                  .bd-highlight= "id: #{d['id']}&nbsp;".html_safe
                - if !!d['properties']
                  - d['properties'].each do |key, value|
                    \|&nbsp;
                    .bd-highlight= "#{key}: #{value}&nbsp;".html_safe
        - elsif transaction.contract == 'nft' && transaction.action == 'addProperty'
          added property for
          = link_to payload['symbol'], transactions_path(symbol: payload['symbol'])
          = surround '(', ')' do
            name:
            = payload['name']
            type:
            %code<= "#{payload['type']}#{payload['isReadOnly'] ? ' (readonly)' : ''}"
        - else
          .badge.badge-primary= transaction.contract.underscore.humanize.downcase
          .badge.badge-primary= transaction.action.underscore.humanize.downcase
          - if transaction.contract == 'market'
            - if transaction.action == 'cancel'
              = surround '(', ')' do
                = link_to "original transaction #{payload['type']}", tx_path(payload['id'])
            - elsif !!payload['quantity']
              %code= number_with_delimiter(payload['quantity']) + ' ' + payload['symbol'] rescue ''
              - if !!payload['price']
                %span.text-muted @
                %code= number_with_delimiter(payload['price']) + ' ' + core_symbol
              - else
                @ No price.
          - else
            %span{title: JSON.pretty_generate(payload)} â€¢
          - if !!logs['events']
            .d-flex.align-content-around.flex-wrap
              = render partial: 'event', collection: logs['events'], locals: {memo: payload['memo']}
        - if transaction.is_error?
          = render partial: 'error', collection: logs['errors']
        = link_to transaction.trx_id[0..6], tx_path(transaction.trx_id), class: 'tag'
        .foot
          = link_to b_path(transaction.block_num) do
            %time{data: {toggle: 'tooltip', placement: 'right'}, title: transaction.timestamp}
              = transaction.timestamp
